{
  config,
  lib,
  ...
}: let
  cfg = config.services.tailscale;
in {
  options = with lib; {
    services.tailscale.persistence = mkOption {
      type = types.attrsOf types.raw;
      default = {
        secret.directories = [
          # tailscaled.state is atomically copied to this directory, so the parent directory must be persisted
          "/var/lib/tailscale"

          # Files include
          # /var/lib/tailscale/tailscaled.state: sensitive state
          # /var/lib/tailscale/tailscaled.log1.txt: deprecated log file (always empty)
          # /var/lib/tailscale/tailscaled.log2.txt: deprecated log file (always empty)
          # /var/lib/tailscale/tailscaled.log.conf: random log ID generated by every node
          #                                         (used for the telemetry that tailscale uploads)

          # Sub-directories include
          # /var/lib/tailscale/files: taildrops buffered here until `tailscale file get ...` is used
          #                           (telemetry to upload is also buffered here)
        ];
      };
      description = ''
        Persist tailscale keys, files and ids.
      '';
    };
  };

  config = let
    persistence = builtins.intersectAttrs config.environment.automaticPersistence cfg.persistence;
  in
    lib.mkIf (cfg.enable && persistence != {}) {
      environment.persistence =
        lib.mkMerge
        (lib.mapAttrsToList
          (k: v: {${config.environment.automaticPersistence.${k}.path} = v;})
          persistence);
    };
}
